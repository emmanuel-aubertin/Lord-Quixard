<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="class_game_board" kind="class" language="C++" prot="public">
    <compoundname>GameBoard</compoundname>
    <includes refid="_game_board_8hpp" local="no">GameBoard.hpp</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_game_board_1ad93d1f5842d6c3a68a2e2303aff6c1c9" prot="private" static="no" mutable="no">
        <type>std::array&lt; std::array&lt; <ref refid="struct_tile" kindref="compound">Tile</ref>, 5 &gt;, 5 &gt;</type>
        <definition>std::array&lt;std::array&lt;Tile, 5&gt;, 5&gt; GameBoard::board</definition>
        <argsstring></argsstring>
        <name>board</name>
        <qualifiedname>GameBoard::board</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GameBoard/GameBoard.hpp" line="43" column="16" bodyfile="src/GameBoard/GameBoard.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_game_board_1ac622cadcc81b3ffb71d8feb4506c04ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GameBoard::GameBoard</definition>
        <argsstring>()</argsstring>
        <name>GameBoard</name>
        <qualifiedname>GameBoard::GameBoard</qualifiedname>
        <briefdescription>
<para>Construct a new Game Board object. Initializes the game board by filling it with blank tiles. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GameBoard/GameBoard.hpp" line="24" column="5" bodyfile="src/GameBoard/GameBoard.cpp" bodystart="7" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="class_game_board_1af65e2b2c2177485d486c2afd7c6617ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GameBoard::move</definition>
        <argsstring>(const int x, const int y, const int new_x, const int new_y, const Tile::Sign sign)</argsstring>
        <name>move</name>
        <qualifiedname>GameBoard::move</qualifiedname>
        <param>
          <type>const int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>new_x</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>new_y</declname>
        </param>
        <param>
          <type>const <ref refid="struct_tile_1aafb31e1fb33692cca3b88e4099247305" kindref="member">Tile::Sign</ref></type>
          <declname>sign</declname>
        </param>
        <briefdescription>
<para>Executes a move on the game board. Checks if the move is valid and then applies it by updating the tiles on the board. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate of the starting position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate of the starting position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate of the ending position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate of the ending position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sign</parametername>
</parameternamelist>
<parameterdescription>
<para>The player&apos;s sign (X or O). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the move is valid and successfully made, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GameBoard/GameBoard.hpp" line="25" column="10" bodyfile="src/GameBoard/GameBoard.cpp" bodystart="128" bodyend="177"/>
        <referencedby refid="class_min_max_a_i_1a34cf1f0e14ffd2563002b8c7403f4bdb" compoundref="_min_max_a_i_8cpp" startline="171" endline="203">MinMaxAI::getPlay</referencedby>
        <referencedby refid="class_game_engine_1a36ce03ed1a7e52e7c2ae86c6aa1c9374" compoundref="_game_engine_8cpp" startline="46" endline="59">GameEngine::move</referencedby>
        <referencedby refid="class_game_board_1a499db93426e6ebc1acfd45eb0dc5b536" compoundref="_game_board_8cpp" startline="107" endline="115">move</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_game_board_1a499db93426e6ebc1acfd45eb0dc5b536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GameBoard::move</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;, const Tile::Sign sign)</argsstring>
        <name>move</name>
        <qualifiedname>GameBoard::move</qualifiedname>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <defname>inMove</defname>
        </param>
        <param>
          <type>const <ref refid="struct_tile_1aafb31e1fb33692cca3b88e4099247305" kindref="member">Tile::Sign</ref></type>
          <declname>sign</declname>
        </param>
        <briefdescription>
<para>Executes a move on the game board. Validates and applies the move described in the vector to the board. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>inMove</parametername>
</parameternamelist>
<parameterdescription>
<para>The move to be made, represented as a vector {x, y, new_x, new_y}. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sign</parametername>
</parameternamelist>
<parameterdescription>
<para>The player&apos;s sign (X or O). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the move is valid and successfully made, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GameBoard/GameBoard.hpp" line="26" column="10" bodyfile="src/GameBoard/GameBoard.cpp" bodystart="107" bodyend="115"/>
        <references refid="class_game_board_1af65e2b2c2177485d486c2afd7c6617ef" compoundref="_game_board_8cpp" startline="128" endline="177">move</references>
      </memberdef>
      <memberdef kind="function" id="class_game_board_1abbcd432d62ac889c57ac94758358365a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GameBoard::printBoard</definition>
        <argsstring>()</argsstring>
        <name>printBoard</name>
        <qualifiedname>GameBoard::printBoard</qualifiedname>
        <briefdescription>
<para>Prints the current state of the game board. Iterates through the board and prints &apos;X&apos;, &apos;O&apos;, or &apos;B&apos; representing the state of each tile. Usefull for debugging. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GameBoard/GameBoard.hpp" line="27" column="10" bodyfile="src/GameBoard/GameBoard.cpp" bodystart="20" bodyend="41"/>
        <references refid="struct_tile_1aafb31e1fb33692cca3b88e4099247305a8d02d2d250080ae6f6ef5a0e26691671" compoundref="_tile_8cpp" startline="6">Tile::O</references>
        <references refid="struct_tile_1aafb31e1fb33692cca3b88e4099247305adf141bb3f83331473a28e74837c99d31" compoundref="_tile_8cpp" startline="6">Tile::X</references>
        <referencedby refid="class_game_engine_1a1a3afaae3d906d88f1d344497671550c" compoundref="_game_engine_8cpp" startline="81" endline="84">GameEngine::printBoard</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_game_board_1a61f90f41bc79a5462dd06b625747e227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; std::array&lt; <ref refid="struct_tile" kindref="compound">Tile</ref>, 5 &gt;, 5 &gt;</type>
        <definition>std::array&lt; std::array&lt; Tile, 5 &gt;, 5 &gt; GameBoard::getBoard</definition>
        <argsstring>()</argsstring>
        <name>getBoard</name>
        <qualifiedname>GameBoard::getBoard</qualifiedname>
        <briefdescription>
<para>Gets the current state of the game board. Returns a copy of the 2D array representing the game board. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::array&lt;std::array&lt;Tile, 5&gt;, 5&gt; The current state of the game board. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GameBoard/GameBoard.hpp" line="28" column="16" bodyfile="src/GameBoard/GameBoard.cpp" bodystart="220" bodyend="223"/>
        <referencedby refid="class_game_engine_1a240bd6ba9896a74d8d6a391d68321f65" compoundref="_game_engine_8cpp" startline="103" endline="106">GameEngine::getBoard</referencedby>
        <referencedby refid="class_game_engine_1a83c9b6668f8e83200bc22df7fea0b710" compoundref="_game_engine_8cpp" startline="126" endline="136">GameEngine::isWinner</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_game_board_1a35e27d8d446a0a16620697ab45a5a552" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; int &gt; &gt; GameBoard::getPossibleMoves</definition>
        <argsstring>(const Tile::Sign currentPlayer)</argsstring>
        <name>getPossibleMoves</name>
        <qualifiedname>GameBoard::getPossibleMoves</qualifiedname>
        <param>
          <type>const <ref refid="struct_tile_1aafb31e1fb33692cca3b88e4099247305" kindref="member">Tile::Sign</ref></type>
          <declname>currentPlayer</declname>
        </param>
        <briefdescription>
<para>Calculates all possible moves for the current player. Analyzes the game board and returns a list of valid moves for the given player. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>currentPlayer</parametername>
</parameternamelist>
<parameterdescription>
<para>The current player&apos;s sign (X or O). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::vector&lt;int&gt;&gt; List of possible moves, each move is represented as a vector {x, y, new_x, new_y}. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GameBoard/GameBoard.hpp" line="29" column="17" bodyfile="src/GameBoard/GameBoard.cpp" bodystart="50" bodyend="97"/>
        <references refid="struct_tile_1aafb31e1fb33692cca3b88e4099247305adb856a73d6fcc8db6d64395f5f199232" compoundref="_tile_8cpp" startline="6">Tile::Blank</references>
        <referencedby refid="class_min_max_a_i_1a34cf1f0e14ffd2563002b8c7403f4bdb" compoundref="_min_max_a_i_8cpp" startline="171" endline="203">MinMaxAI::getPlay</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_game_board_1a2cd5735250d2c46750f0fb9fd94230b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_game_board_memento" kindref="compound">GameBoardMemento</ref></type>
        <definition>GameBoardMemento GameBoard::saveToMemento</definition>
        <argsstring>()</argsstring>
        <name>saveToMemento</name>
        <qualifiedname>GameBoard::saveToMemento</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GameBoard/GameBoard.hpp" line="31" column="22" bodyfile="src/GameBoard/GameBoard.hpp" bodystart="31" bodyend="34"/>
        <referencedby refid="class_game_engine_1a6066180bec6f2b090addf2efcca66fe2" compoundref="_game_engine_8cpp" startline="5" endline="13">GameEngine::GameEngine</referencedby>
        <referencedby refid="class_game_engine_1a36ce03ed1a7e52e7c2ae86c6aa1c9374" compoundref="_game_engine_8cpp" startline="46" endline="59">GameEngine::move</referencedby>
      </memberdef>
      <memberdef kind="function" id="class_game_board_1aee0736a70e7b7297791bd4bb40560c4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void GameBoard::restoreFromMemento</definition>
        <argsstring>(const GameBoardMemento memento)</argsstring>
        <name>restoreFromMemento</name>
        <qualifiedname>GameBoard::restoreFromMemento</qualifiedname>
        <param>
          <type>const <ref refid="class_game_board_memento" kindref="compound">GameBoardMemento</ref></type>
          <declname>memento</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GameBoard/GameBoard.hpp" line="36" column="10" bodyfile="src/GameBoard/GameBoard.hpp" bodystart="36" bodyend="39"/>
        <references refid="class_game_board_memento_1a28dea1693c084c8eed8d4b6cd65b1c6e" compoundref="_game_board_8hpp" startline="15" endline="18">GameBoardMemento::getState</references>
        <referencedby refid="class_game_engine_1a98a153133811eebf83c49b698053d8a0" compoundref="_game_engine_8cpp" startline="61" endline="79">GameEngine::undoMove</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="class_game_board_1a1d92236b040d5784bcdc2582e05a33e4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool GameBoard::isValidMove</definition>
        <argsstring>(const int x, const int y, const int new_x, const int new_y, const Tile::Sign sign)</argsstring>
        <name>isValidMove</name>
        <qualifiedname>GameBoard::isValidMove</qualifiedname>
        <param>
          <type>const int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>new_x</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>new_y</declname>
        </param>
        <param>
          <type>const <ref refid="struct_tile_1aafb31e1fb33692cca3b88e4099247305" kindref="member">Tile::Sign</ref></type>
          <declname>sign</declname>
        </param>
        <briefdescription>
<para>Validates a proposed move. Checks if the move is legal according to the game rules (e.g., starting from an edge tile, moving in the same row or column). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate of the starting position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate of the starting position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_x</parametername>
</parameternamelist>
<parameterdescription>
<para>The x-coordinate of the ending position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_y</parametername>
</parameternamelist>
<parameterdescription>
<para>The y-coordinate of the ending position. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sign</parametername>
</parameternamelist>
<parameterdescription>
<para>The player&apos;s sign (X or O). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the move is valid, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/GameBoard/GameBoard.hpp" line="42" column="10" bodyfile="src/GameBoard/GameBoard.cpp" bodystart="190" bodyend="212"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>GameBoard</label>
        <link refid="class_game_board"/>
      </node>
    </collaborationgraph>
    <location file="src/GameBoard/GameBoard.hpp" line="21" column="1" bodyfile="src/GameBoard/GameBoard.hpp" bodystart="22" bodyend="44"/>
    <listofallmembers>
      <member refid="class_game_board_1ad93d1f5842d6c3a68a2e2303aff6c1c9" prot="private" virt="non-virtual"><scope>GameBoard</scope><name>board</name></member>
      <member refid="class_game_board_1ac622cadcc81b3ffb71d8feb4506c04ac" prot="public" virt="non-virtual"><scope>GameBoard</scope><name>GameBoard</name></member>
      <member refid="class_game_board_1a61f90f41bc79a5462dd06b625747e227" prot="public" virt="non-virtual"><scope>GameBoard</scope><name>getBoard</name></member>
      <member refid="class_game_board_1a35e27d8d446a0a16620697ab45a5a552" prot="public" virt="non-virtual"><scope>GameBoard</scope><name>getPossibleMoves</name></member>
      <member refid="class_game_board_1a1d92236b040d5784bcdc2582e05a33e4" prot="private" virt="non-virtual"><scope>GameBoard</scope><name>isValidMove</name></member>
      <member refid="class_game_board_1af65e2b2c2177485d486c2afd7c6617ef" prot="public" virt="non-virtual"><scope>GameBoard</scope><name>move</name></member>
      <member refid="class_game_board_1a499db93426e6ebc1acfd45eb0dc5b536" prot="public" virt="non-virtual"><scope>GameBoard</scope><name>move</name></member>
      <member refid="class_game_board_1abbcd432d62ac889c57ac94758358365a" prot="public" virt="non-virtual"><scope>GameBoard</scope><name>printBoard</name></member>
      <member refid="class_game_board_1aee0736a70e7b7297791bd4bb40560c4e" prot="public" virt="non-virtual"><scope>GameBoard</scope><name>restoreFromMemento</name></member>
      <member refid="class_game_board_1a2cd5735250d2c46750f0fb9fd94230b9" prot="public" virt="non-virtual"><scope>GameBoard</scope><name>saveToMemento</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
