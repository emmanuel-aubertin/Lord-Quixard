<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="class_player_a_i" kind="class" language="C++" prot="public">
    <compoundname>PlayerAI</compoundname>
    <basecompoundref refid="class_player" prot="public" virt="non-virtual">Player</basecompoundref>
    <derivedcompoundref refid="class_min_max_a_i" prot="public" virt="non-virtual">MinMaxAI</derivedcompoundref>
    <derivedcompoundref refid="class_random_a_i" prot="public" virt="non-virtual">RandomAI</derivedcompoundref>
    <includes refid="_player_a_i_8hpp" local="no">PlayerAI.hpp</includes>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_player_a_i_1a8a7d49d494914bbb3938934acbcd5912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>PlayerAI::PlayerAI</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>PlayerAI</name>
        <qualifiedname>PlayerAI::PlayerAI</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="class_player_a_i" kindref="compound">PlayerAI</ref> object. Initializes the AI player with the given name and outputs a creation message to the console. This constructor is also intended for initializing any future AI-specific features. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the AI player. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Player/AIPlayer/PlayerAI.hpp" line="11" column="5" bodyfile="src/Player/AIPlayer/PlayerAI.cpp" bodystart="10" bodyend="14"/>
        <references refid="class_player_1af9c920fabaafdeb7961a645315b521ff" compoundref="_player_8hpp" startline="16">Player::name</references>
      </memberdef>
      <memberdef kind="function" id="class_player_a_i_1a2f188586bb2be4ea74d67960dee2ef18" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual PlayerAI::~PlayerAI</definition>
        <argsstring>()=default</argsstring>
        <name>~PlayerAI</name>
        <qualifiedname>PlayerAI::~PlayerAI</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Player/AIPlayer/PlayerAI.hpp" line="12" column="13"/>
      </memberdef>
      <memberdef kind="function" id="class_player_a_i_1a2d60e5fb3d3d6a97bc73af0f43b5859e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt; int &gt; PlayerAI::getPlay</definition>
        <argsstring>(GameBoard *, Tile::Sign)</argsstring>
        <name>getPlay</name>
        <qualifiedname>PlayerAI::getPlay</qualifiedname>
        <reimplementedby refid="class_min_max_a_i_1a34cf1f0e14ffd2563002b8c7403f4bdb">getPlay</reimplementedby>
        <reimplementedby refid="class_random_a_i_1ad8b4911a60068bd576e8524dfb393fa6">getPlay</reimplementedby>
        <param>
          <type><ref refid="class_game_board" kindref="compound">GameBoard</ref> *</type>
        </param>
        <param>
          <type><ref refid="struct_tile_1aafb31e1fb33692cca3b88e4099247305" kindref="member">Tile::Sign</ref></type>
        </param>
        <briefdescription>
<para>Determines the AI player&apos;s move. Currently, this method returns an empty vector, indicating no move is made. This method is meant to be expanded in the future to calculate and return the AI&apos;s move based on the game board state and the AI player&apos;s sign. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gameBoard</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the current game board. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sign</parametername>
</parameternamelist>
<parameterdescription>
<para>The AI player&apos;s sign (X or O). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;int&gt; The AI player&apos;s chosen move, represented as a vector. Currently returns an empty vector. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/Player/AIPlayer/PlayerAI.hpp" line="13" column="25" bodyfile="src/Player/AIPlayer/PlayerAI.cpp" bodystart="25" bodyend="28"/>
        <referencedby refid="class_game_engine_1ab12180f7abf3e1fc39407fad7257972b" compoundref="_game_engine_8cpp" startline="194" endline="211">GameEngine::makeIAmove</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>MinMaxAI</label>
        <link refid="class_min_max_a_i"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Player</label>
        <link refid="class_player"/>
      </node>
      <node id="1">
        <label>PlayerAI</label>
        <link refid="class_player_a_i"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4">
        <label>RandomAI</label>
        <link refid="class_random_a_i"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Player</label>
        <link refid="class_player"/>
      </node>
      <node id="1">
        <label>PlayerAI</label>
        <link refid="class_player_a_i"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/Player/AIPlayer/PlayerAI.hpp" line="8" column="1" bodyfile="src/Player/AIPlayer/PlayerAI.hpp" bodystart="9" bodyend="14"/>
    <listofallmembers>
      <member refid="class_player_1af1aa472885d589516f483e26e786600e" prot="public" virt="non-virtual"><scope>PlayerAI</scope><name>getName</name></member>
      <member refid="class_player_a_i_1a2d60e5fb3d3d6a97bc73af0f43b5859e" prot="public" virt="virtual"><scope>PlayerAI</scope><name>getPlay</name></member>
      <member refid="class_player_1af9c920fabaafdeb7961a645315b521ff" prot="protected" virt="non-virtual"><scope>PlayerAI</scope><name>name</name></member>
      <member refid="class_player_1a45fa04a2a4ff9235e6c100b7c6ab232a" prot="public" virt="non-virtual"><scope>PlayerAI</scope><name>Player</name></member>
      <member refid="class_player_a_i_1a8a7d49d494914bbb3938934acbcd5912" prot="public" virt="non-virtual"><scope>PlayerAI</scope><name>PlayerAI</name></member>
      <member refid="class_player_1a77cfdb8708c16a0726d5bdd9e7b356d1" prot="protected" virt="non-virtual"><scope>PlayerAI</scope><name>setName</name></member>
      <member refid="class_player_1a11017c0ed8a639f3b1308ab167fbeca2" prot="public" virt="virtual"><scope>PlayerAI</scope><name>~Player</name></member>
      <member refid="class_player_a_i_1a2f188586bb2be4ea74d67960dee2ef18" prot="public" virt="virtual"><scope>PlayerAI</scope><name>~PlayerAI</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
